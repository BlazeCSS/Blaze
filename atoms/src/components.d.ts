/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  AccordionPane as BlazeAccordionPane
} from './components/accordion/blaze-accordion-pane';

declare global {
  interface HTMLBlazeAccordionPaneElement extends BlazeAccordionPane, HTMLElement {
  }
  var HTMLBlazeAccordionPaneElement: {
    prototype: HTMLBlazeAccordionPaneElement;
    new (): HTMLBlazeAccordionPaneElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-accordion-pane": HTMLBlazeAccordionPaneElement;
  }
  interface ElementTagNameMap {
    "blaze-accordion-pane": HTMLBlazeAccordionPaneElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-accordion-pane": JSXElements.BlazeAccordionPaneAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAccordionPaneAttributes extends HTMLAttributes {
      
        expanded?: boolean,
        header?: string
    }
  }
}


import {
  Accordion as BlazeAccordion
} from './components/accordion/blaze-accordion';

declare global {
  interface HTMLBlazeAccordionElement extends BlazeAccordion, HTMLElement {
  }
  var HTMLBlazeAccordionElement: {
    prototype: HTMLBlazeAccordionElement;
    new (): HTMLBlazeAccordionElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-accordion": HTMLBlazeAccordionElement;
  }
  interface ElementTagNameMap {
    "blaze-accordion": HTMLBlazeAccordionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-accordion": JSXElements.BlazeAccordionAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAccordionAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AddressHeading as BlazeAddressHeading
} from './components/address/blaze-address-heading';

declare global {
  interface HTMLBlazeAddressHeadingElement extends BlazeAddressHeading, HTMLElement {
  }
  var HTMLBlazeAddressHeadingElement: {
    prototype: HTMLBlazeAddressHeadingElement;
    new (): HTMLBlazeAddressHeadingElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-address-heading": HTMLBlazeAddressHeadingElement;
  }
  interface ElementTagNameMap {
    "blaze-address-heading": HTMLBlazeAddressHeadingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-address-heading": JSXElements.BlazeAddressHeadingAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAddressHeadingAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Address as BlazeAddress
} from './components/address/blaze-address';

declare global {
  interface HTMLBlazeAddressElement extends BlazeAddress, HTMLElement {
  }
  var HTMLBlazeAddressElement: {
    prototype: HTMLBlazeAddressElement;
    new (): HTMLBlazeAddressElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-address": HTMLBlazeAddressElement;
  }
  interface ElementTagNameMap {
    "blaze-address": HTMLBlazeAddressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-address": JSXElements.BlazeAddressAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAddressAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Alert as BlazeAlert
} from './components/alert/blaze-alert';

declare global {
  interface HTMLBlazeAlertElement extends BlazeAlert, HTMLElement {
  }
  var HTMLBlazeAlertElement: {
    prototype: HTMLBlazeAlertElement;
    new (): HTMLBlazeAlertElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-alert": HTMLBlazeAlertElement;
  }
  interface ElementTagNameMap {
    "blaze-alert": HTMLBlazeAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-alert": JSXElements.BlazeAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAlertAttributes extends HTMLAttributes {
      
        type?: string,
        dismissable?: boolean
    }
  }
}


import {
  Avatar as BlazeAvatar
} from './components/avatar/blaze-avatar';

declare global {
  interface HTMLBlazeAvatarElement extends BlazeAvatar, HTMLElement {
  }
  var HTMLBlazeAvatarElement: {
    prototype: HTMLBlazeAvatarElement;
    new (): HTMLBlazeAvatarElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-avatar": HTMLBlazeAvatarElement;
  }
  interface ElementTagNameMap {
    "blaze-avatar": HTMLBlazeAvatarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-avatar": JSXElements.BlazeAvatarAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAvatarAttributes extends HTMLAttributes {
      
        size?: string,
        src?: string,
        src2?: string,
        text?: string
    }
  }
}


import {
  Badge as BlazeBadge
} from './components/badge/blaze-badge';

declare global {
  interface HTMLBlazeBadgeElement extends BlazeBadge, HTMLElement {
  }
  var HTMLBlazeBadgeElement: {
    prototype: HTMLBlazeBadgeElement;
    new (): HTMLBlazeBadgeElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-badge": HTMLBlazeBadgeElement;
  }
  interface ElementTagNameMap {
    "blaze-badge": HTMLBlazeBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-badge": JSXElements.BlazeBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBadgeAttributes extends HTMLAttributes {
      
        type?: string,
        rounded?: boolean,
        ghost?: boolean
    }
  }
}


import {
  Breadcrumb as BlazeBreadcrumb
} from './components/breadcrumbs/blaze-breadcrumb';

declare global {
  interface HTMLBlazeBreadcrumbElement extends BlazeBreadcrumb, HTMLElement {
  }
  var HTMLBlazeBreadcrumbElement: {
    prototype: HTMLBlazeBreadcrumbElement;
    new (): HTMLBlazeBreadcrumbElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-breadcrumb": HTMLBlazeBreadcrumbElement;
  }
  interface ElementTagNameMap {
    "blaze-breadcrumb": HTMLBlazeBreadcrumbElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-breadcrumb": JSXElements.BlazeBreadcrumbAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBreadcrumbAttributes extends HTMLAttributes {
      
        href?: string
    }
  }
}


import {
  Breadcrumbs as BlazeBreadcrumbs
} from './components/breadcrumbs/blaze-breadcrumbs';

declare global {
  interface HTMLBlazeBreadcrumbsElement extends BlazeBreadcrumbs, HTMLElement {
  }
  var HTMLBlazeBreadcrumbsElement: {
    prototype: HTMLBlazeBreadcrumbsElement;
    new (): HTMLBlazeBreadcrumbsElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-breadcrumbs": HTMLBlazeBreadcrumbsElement;
  }
  interface ElementTagNameMap {
    "blaze-breadcrumbs": HTMLBlazeBreadcrumbsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-breadcrumbs": JSXElements.BlazeBreadcrumbsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBreadcrumbsAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Card as BlazeCard
} from './components/card/blaze-card';

declare global {
  interface HTMLBlazeCardElement extends BlazeCard, HTMLElement {
  }
  var HTMLBlazeCardElement: {
    prototype: HTMLBlazeCardElement;
    new (): HTMLBlazeCardElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-card": HTMLBlazeCardElement;
  }
  interface ElementTagNameMap {
    "blaze-card": HTMLBlazeCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-card": JSXElements.BlazeCardAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeCardAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  Image as BlazeImage
} from './components/image/blaze-image';

declare global {
  interface HTMLBlazeImageElement extends BlazeImage, HTMLElement {
  }
  var HTMLBlazeImageElement: {
    prototype: HTMLBlazeImageElement;
    new (): HTMLBlazeImageElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-image": HTMLBlazeImageElement;
  }
  interface ElementTagNameMap {
    "blaze-image": HTMLBlazeImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-image": JSXElements.BlazeImageAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeImageAttributes extends HTMLAttributes {
      
        src?: string,
        alt?: string,
        width?: number,
        height?: number,
        photo?: string,
        user?: string,
        likes?: boolean,
        collection?: string,
        filter?: string
    }
  }
}


import {
  Panel as BlazePanel
} from './components/panel/blaze-panel';

declare global {
  interface HTMLBlazePanelElement extends BlazePanel, HTMLElement {
  }
  var HTMLBlazePanelElement: {
    prototype: HTMLBlazePanelElement;
    new (): HTMLBlazePanelElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-panel": HTMLBlazePanelElement;
  }
  interface ElementTagNameMap {
    "blaze-panel": HTMLBlazePanelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-panel": JSXElements.BlazePanelAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazePanelAttributes extends HTMLAttributes {
      
        height?: number
    }
  }
}


import {
  Toasts as BlazeToasts
} from './components/toasts/blaze-toasts';

declare global {
  interface HTMLBlazeToastsElement extends BlazeToasts, HTMLElement {
  }
  var HTMLBlazeToastsElement: {
    prototype: HTMLBlazeToastsElement;
    new (): HTMLBlazeToastsElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-toasts": HTMLBlazeToastsElement;
  }
  interface ElementTagNameMap {
    "blaze-toasts": HTMLBlazeToastsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-toasts": JSXElements.BlazeToastsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeToastsAttributes extends HTMLAttributes {
      
        position?: string
    }
  }
}


import {
  Toggle as BlazeToggle
} from './components/toggle/blaze-toggle';

declare global {
  interface HTMLBlazeToggleElement extends BlazeToggle, HTMLElement {
  }
  var HTMLBlazeToggleElement: {
    prototype: HTMLBlazeToggleElement;
    new (): HTMLBlazeToggleElement;
  };
  interface HTMLElementTagNameMap {
    "blaze-toggle": HTMLBlazeToggleElement;
  }
  interface ElementTagNameMap {
    "blaze-toggle": HTMLBlazeToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blaze-toggle": JSXElements.BlazeToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeToggleAttributes extends HTMLAttributes {
      
        type?: string,
        toggled?: boolean
    }
  }
}


import {
  DemoApp as DemoApp
} from './demo-app';

declare global {
  interface HTMLDemoAppElement extends DemoApp, HTMLElement {
  }
  var HTMLDemoAppElement: {
    prototype: HTMLDemoAppElement;
    new (): HTMLDemoAppElement;
  };
  interface HTMLElementTagNameMap {
    "demo-app": HTMLDemoAppElement;
  }
  interface ElementTagNameMap {
    "demo-app": HTMLDemoAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "demo-app": JSXElements.DemoAppAttributes;
    }
  }
  namespace JSXElements {
    export interface DemoAppAttributes extends HTMLAttributes {
      
    }
  }
}

