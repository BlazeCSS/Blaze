/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IAutoCompleteItem } from "./components/autocomplete/interfaces";
export namespace Components {
    interface BlazeAccordion {
    }
    interface BlazeAccordionPane {
        "close": () => Promise<void>;
        "header": string;
        "isOpen": () => Promise<boolean>;
        "open": boolean;
        "show": () => Promise<void>;
    }
    interface BlazeAddress {
    }
    interface BlazeAddressHeading {
    }
    interface BlazeAlert {
        "close": () => Promise<void>;
        "dismissible": boolean;
        "isOpen": () => Promise<boolean>;
        "open": boolean;
        "show": () => Promise<void>;
        "type": string;
    }
    interface BlazeAlerts {
        "position": string;
    }
    interface BlazeAutocomplete {
        "placeholder": string;
        "setItems": (items: Array<IAutoCompleteItem>) => Promise<void>;
    }
    interface BlazeAvatar {
        "alt": string;
        "alt2": string;
        "size": string;
        "src": string;
        "src2": string;
        "text": string;
    }
    interface BlazeBackToTop {
        "position": string;
    }
    interface BlazeBadge {
        "ghost": boolean;
        "rounded": boolean;
        "type": string;
    }
    interface BlazeBreadcrumb {
        "href": string;
    }
    interface BlazeBreadcrumbs {
    }
    interface BlazeCalendar {
        "date": string;
        "multiple": boolean;
        "type": string;
    }
    interface BlazeCard {
    }
    interface BlazeCardBody {
    }
    interface BlazeCardFooter {
    }
    interface BlazeCardHeader {
    }
    interface BlazeCounter {
        "autoStart": boolean;
        "decimal": string;
        "decimals": number;
        "delay": number;
        "duration": number;
        "easing": boolean;
        "endValue": number;
        "grouping": boolean;
        "pauseResume": () => Promise<void>;
        "reset": () => Promise<void>;
        "restart": () => Promise<void>;
        "separator": string;
        "start": () => Promise<void>;
        "startValue": number;
        "update": (value: number) => Promise<void>;
    }
    interface BlazeDemo {
        "classes": string;
        "code": string;
        "demo": boolean;
        "language": string;
    }
    interface BlazeDivider {
        "type": string;
    }
    interface BlazeDrawer {
        "close": () => Promise<void>;
        "dismissible": boolean;
        "isOpen": () => Promise<boolean>;
        "open": boolean;
        "position": string;
        "show": () => Promise<void>;
    }
    interface BlazeFileUpload {
        "drop": boolean;
        "multiple": boolean;
        "url": string;
    }
    interface BlazeImage {
        "alt": string;
        "collection": string;
        "filter": string;
        "height": number;
        "likes": boolean;
        "photo": string;
        "src": string;
        "user": string;
        "width": number;
    }
    interface BlazeMediaBody {
    }
    interface BlazeMediaImage {
        "alt": string;
        "src": string;
    }
    interface BlazeMediaItem {
    }
    interface BlazeModal {
        "close": () => Promise<void>;
        "dismissible": boolean;
        "full": boolean;
        "ghost": boolean;
        "isOpen": () => Promise<boolean>;
        "open": boolean;
        "show": () => Promise<void>;
    }
    interface BlazePagination {
        "currentPage": () => Promise<number>;
        "goToPage": (page: number) => Promise<void>;
        "page": number;
        "pages": number;
    }
    interface BlazePanel {
        "height": number;
    }
    interface BlazeProgress {
        "rounded": boolean;
        "size": string;
        "timer": boolean;
    }
    interface BlazeProgressBar {
        "duration": number;
        "max": number;
        "min": number;
        "type": string;
        "value": number;
    }
    interface BlazeSticky {
        "top": number;
    }
    interface BlazeTab {
        "disabled": boolean;
        "header": string;
        "open": boolean;
        "type": string;
    }
    interface BlazeTabs {
        "currentTab": () => Promise<number>;
        "openTab": (tabIndex: number) => Promise<void>;
    }
    interface BlazeTimeline {
        "alternate": boolean;
        "loading": boolean;
    }
    interface BlazeTimelineItem {
        "last": boolean;
        "left": boolean;
        "loading": boolean;
        "type": string;
    }
    interface BlazeToggle {
        "isToggled": () => Promise<boolean>;
        "toggled": boolean;
        "type": string;
    }
}
declare global {
    interface HTMLBlazeAccordionElement extends Components.BlazeAccordion, HTMLStencilElement {
    }
    var HTMLBlazeAccordionElement: {
        prototype: HTMLBlazeAccordionElement;
        new (): HTMLBlazeAccordionElement;
    };
    interface HTMLBlazeAccordionPaneElement extends Components.BlazeAccordionPane, HTMLStencilElement {
    }
    var HTMLBlazeAccordionPaneElement: {
        prototype: HTMLBlazeAccordionPaneElement;
        new (): HTMLBlazeAccordionPaneElement;
    };
    interface HTMLBlazeAddressElement extends Components.BlazeAddress, HTMLStencilElement {
    }
    var HTMLBlazeAddressElement: {
        prototype: HTMLBlazeAddressElement;
        new (): HTMLBlazeAddressElement;
    };
    interface HTMLBlazeAddressHeadingElement extends Components.BlazeAddressHeading, HTMLStencilElement {
    }
    var HTMLBlazeAddressHeadingElement: {
        prototype: HTMLBlazeAddressHeadingElement;
        new (): HTMLBlazeAddressHeadingElement;
    };
    interface HTMLBlazeAlertElement extends Components.BlazeAlert, HTMLStencilElement {
    }
    var HTMLBlazeAlertElement: {
        prototype: HTMLBlazeAlertElement;
        new (): HTMLBlazeAlertElement;
    };
    interface HTMLBlazeAlertsElement extends Components.BlazeAlerts, HTMLStencilElement {
    }
    var HTMLBlazeAlertsElement: {
        prototype: HTMLBlazeAlertsElement;
        new (): HTMLBlazeAlertsElement;
    };
    interface HTMLBlazeAutocompleteElement extends Components.BlazeAutocomplete, HTMLStencilElement {
    }
    var HTMLBlazeAutocompleteElement: {
        prototype: HTMLBlazeAutocompleteElement;
        new (): HTMLBlazeAutocompleteElement;
    };
    interface HTMLBlazeAvatarElement extends Components.BlazeAvatar, HTMLStencilElement {
    }
    var HTMLBlazeAvatarElement: {
        prototype: HTMLBlazeAvatarElement;
        new (): HTMLBlazeAvatarElement;
    };
    interface HTMLBlazeBackToTopElement extends Components.BlazeBackToTop, HTMLStencilElement {
    }
    var HTMLBlazeBackToTopElement: {
        prototype: HTMLBlazeBackToTopElement;
        new (): HTMLBlazeBackToTopElement;
    };
    interface HTMLBlazeBadgeElement extends Components.BlazeBadge, HTMLStencilElement {
    }
    var HTMLBlazeBadgeElement: {
        prototype: HTMLBlazeBadgeElement;
        new (): HTMLBlazeBadgeElement;
    };
    interface HTMLBlazeBreadcrumbElement extends Components.BlazeBreadcrumb, HTMLStencilElement {
    }
    var HTMLBlazeBreadcrumbElement: {
        prototype: HTMLBlazeBreadcrumbElement;
        new (): HTMLBlazeBreadcrumbElement;
    };
    interface HTMLBlazeBreadcrumbsElement extends Components.BlazeBreadcrumbs, HTMLStencilElement {
    }
    var HTMLBlazeBreadcrumbsElement: {
        prototype: HTMLBlazeBreadcrumbsElement;
        new (): HTMLBlazeBreadcrumbsElement;
    };
    interface HTMLBlazeCalendarElement extends Components.BlazeCalendar, HTMLStencilElement {
    }
    var HTMLBlazeCalendarElement: {
        prototype: HTMLBlazeCalendarElement;
        new (): HTMLBlazeCalendarElement;
    };
    interface HTMLBlazeCardElement extends Components.BlazeCard, HTMLStencilElement {
    }
    var HTMLBlazeCardElement: {
        prototype: HTMLBlazeCardElement;
        new (): HTMLBlazeCardElement;
    };
    interface HTMLBlazeCardBodyElement extends Components.BlazeCardBody, HTMLStencilElement {
    }
    var HTMLBlazeCardBodyElement: {
        prototype: HTMLBlazeCardBodyElement;
        new (): HTMLBlazeCardBodyElement;
    };
    interface HTMLBlazeCardFooterElement extends Components.BlazeCardFooter, HTMLStencilElement {
    }
    var HTMLBlazeCardFooterElement: {
        prototype: HTMLBlazeCardFooterElement;
        new (): HTMLBlazeCardFooterElement;
    };
    interface HTMLBlazeCardHeaderElement extends Components.BlazeCardHeader, HTMLStencilElement {
    }
    var HTMLBlazeCardHeaderElement: {
        prototype: HTMLBlazeCardHeaderElement;
        new (): HTMLBlazeCardHeaderElement;
    };
    interface HTMLBlazeCounterElement extends Components.BlazeCounter, HTMLStencilElement {
    }
    var HTMLBlazeCounterElement: {
        prototype: HTMLBlazeCounterElement;
        new (): HTMLBlazeCounterElement;
    };
    interface HTMLBlazeDemoElement extends Components.BlazeDemo, HTMLStencilElement {
    }
    var HTMLBlazeDemoElement: {
        prototype: HTMLBlazeDemoElement;
        new (): HTMLBlazeDemoElement;
    };
    interface HTMLBlazeDividerElement extends Components.BlazeDivider, HTMLStencilElement {
    }
    var HTMLBlazeDividerElement: {
        prototype: HTMLBlazeDividerElement;
        new (): HTMLBlazeDividerElement;
    };
    interface HTMLBlazeDrawerElement extends Components.BlazeDrawer, HTMLStencilElement {
    }
    var HTMLBlazeDrawerElement: {
        prototype: HTMLBlazeDrawerElement;
        new (): HTMLBlazeDrawerElement;
    };
    interface HTMLBlazeFileUploadElement extends Components.BlazeFileUpload, HTMLStencilElement {
    }
    var HTMLBlazeFileUploadElement: {
        prototype: HTMLBlazeFileUploadElement;
        new (): HTMLBlazeFileUploadElement;
    };
    interface HTMLBlazeImageElement extends Components.BlazeImage, HTMLStencilElement {
    }
    var HTMLBlazeImageElement: {
        prototype: HTMLBlazeImageElement;
        new (): HTMLBlazeImageElement;
    };
    interface HTMLBlazeMediaBodyElement extends Components.BlazeMediaBody, HTMLStencilElement {
    }
    var HTMLBlazeMediaBodyElement: {
        prototype: HTMLBlazeMediaBodyElement;
        new (): HTMLBlazeMediaBodyElement;
    };
    interface HTMLBlazeMediaImageElement extends Components.BlazeMediaImage, HTMLStencilElement {
    }
    var HTMLBlazeMediaImageElement: {
        prototype: HTMLBlazeMediaImageElement;
        new (): HTMLBlazeMediaImageElement;
    };
    interface HTMLBlazeMediaItemElement extends Components.BlazeMediaItem, HTMLStencilElement {
    }
    var HTMLBlazeMediaItemElement: {
        prototype: HTMLBlazeMediaItemElement;
        new (): HTMLBlazeMediaItemElement;
    };
    interface HTMLBlazeModalElement extends Components.BlazeModal, HTMLStencilElement {
    }
    var HTMLBlazeModalElement: {
        prototype: HTMLBlazeModalElement;
        new (): HTMLBlazeModalElement;
    };
    interface HTMLBlazePaginationElement extends Components.BlazePagination, HTMLStencilElement {
    }
    var HTMLBlazePaginationElement: {
        prototype: HTMLBlazePaginationElement;
        new (): HTMLBlazePaginationElement;
    };
    interface HTMLBlazePanelElement extends Components.BlazePanel, HTMLStencilElement {
    }
    var HTMLBlazePanelElement: {
        prototype: HTMLBlazePanelElement;
        new (): HTMLBlazePanelElement;
    };
    interface HTMLBlazeProgressElement extends Components.BlazeProgress, HTMLStencilElement {
    }
    var HTMLBlazeProgressElement: {
        prototype: HTMLBlazeProgressElement;
        new (): HTMLBlazeProgressElement;
    };
    interface HTMLBlazeProgressBarElement extends Components.BlazeProgressBar, HTMLStencilElement {
    }
    var HTMLBlazeProgressBarElement: {
        prototype: HTMLBlazeProgressBarElement;
        new (): HTMLBlazeProgressBarElement;
    };
    interface HTMLBlazeStickyElement extends Components.BlazeSticky, HTMLStencilElement {
    }
    var HTMLBlazeStickyElement: {
        prototype: HTMLBlazeStickyElement;
        new (): HTMLBlazeStickyElement;
    };
    interface HTMLBlazeTabElement extends Components.BlazeTab, HTMLStencilElement {
    }
    var HTMLBlazeTabElement: {
        prototype: HTMLBlazeTabElement;
        new (): HTMLBlazeTabElement;
    };
    interface HTMLBlazeTabsElement extends Components.BlazeTabs, HTMLStencilElement {
    }
    var HTMLBlazeTabsElement: {
        prototype: HTMLBlazeTabsElement;
        new (): HTMLBlazeTabsElement;
    };
    interface HTMLBlazeTimelineElement extends Components.BlazeTimeline, HTMLStencilElement {
    }
    var HTMLBlazeTimelineElement: {
        prototype: HTMLBlazeTimelineElement;
        new (): HTMLBlazeTimelineElement;
    };
    interface HTMLBlazeTimelineItemElement extends Components.BlazeTimelineItem, HTMLStencilElement {
    }
    var HTMLBlazeTimelineItemElement: {
        prototype: HTMLBlazeTimelineItemElement;
        new (): HTMLBlazeTimelineItemElement;
    };
    interface HTMLBlazeToggleElement extends Components.BlazeToggle, HTMLStencilElement {
    }
    var HTMLBlazeToggleElement: {
        prototype: HTMLBlazeToggleElement;
        new (): HTMLBlazeToggleElement;
    };
    interface HTMLElementTagNameMap {
        "blaze-accordion": HTMLBlazeAccordionElement;
        "blaze-accordion-pane": HTMLBlazeAccordionPaneElement;
        "blaze-address": HTMLBlazeAddressElement;
        "blaze-address-heading": HTMLBlazeAddressHeadingElement;
        "blaze-alert": HTMLBlazeAlertElement;
        "blaze-alerts": HTMLBlazeAlertsElement;
        "blaze-autocomplete": HTMLBlazeAutocompleteElement;
        "blaze-avatar": HTMLBlazeAvatarElement;
        "blaze-back-to-top": HTMLBlazeBackToTopElement;
        "blaze-badge": HTMLBlazeBadgeElement;
        "blaze-breadcrumb": HTMLBlazeBreadcrumbElement;
        "blaze-breadcrumbs": HTMLBlazeBreadcrumbsElement;
        "blaze-calendar": HTMLBlazeCalendarElement;
        "blaze-card": HTMLBlazeCardElement;
        "blaze-card-body": HTMLBlazeCardBodyElement;
        "blaze-card-footer": HTMLBlazeCardFooterElement;
        "blaze-card-header": HTMLBlazeCardHeaderElement;
        "blaze-counter": HTMLBlazeCounterElement;
        "blaze-demo": HTMLBlazeDemoElement;
        "blaze-divider": HTMLBlazeDividerElement;
        "blaze-drawer": HTMLBlazeDrawerElement;
        "blaze-file-upload": HTMLBlazeFileUploadElement;
        "blaze-image": HTMLBlazeImageElement;
        "blaze-media-body": HTMLBlazeMediaBodyElement;
        "blaze-media-image": HTMLBlazeMediaImageElement;
        "blaze-media-item": HTMLBlazeMediaItemElement;
        "blaze-modal": HTMLBlazeModalElement;
        "blaze-pagination": HTMLBlazePaginationElement;
        "blaze-panel": HTMLBlazePanelElement;
        "blaze-progress": HTMLBlazeProgressElement;
        "blaze-progress-bar": HTMLBlazeProgressBarElement;
        "blaze-sticky": HTMLBlazeStickyElement;
        "blaze-tab": HTMLBlazeTabElement;
        "blaze-tabs": HTMLBlazeTabsElement;
        "blaze-timeline": HTMLBlazeTimelineElement;
        "blaze-timeline-item": HTMLBlazeTimelineItemElement;
        "blaze-toggle": HTMLBlazeToggleElement;
    }
}
declare namespace LocalJSX {
    interface BlazeAccordion {
        "onToggle"?: (event: CustomEvent<any>) => void;
    }
    interface BlazeAccordionPane {
        "header"?: string;
        "onTogglepane"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
    }
    interface BlazeAddress {
    }
    interface BlazeAddressHeading {
    }
    interface BlazeAlert {
        "dismissible"?: boolean;
        "onClose"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
        "type"?: string;
    }
    interface BlazeAlerts {
        "position"?: string;
    }
    interface BlazeAutocomplete {
        "onSearch"?: (event: CustomEvent<any>) => void;
        "onSelected"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
    }
    interface BlazeAvatar {
        "alt"?: string;
        "alt2"?: string;
        "size"?: string;
        "src"?: string;
        "src2"?: string;
        "text"?: string;
    }
    interface BlazeBackToTop {
        "onBacktotop"?: (event: CustomEvent<any>) => void;
        "position"?: string;
    }
    interface BlazeBadge {
        "ghost"?: boolean;
        "rounded"?: boolean;
        "type"?: string;
    }
    interface BlazeBreadcrumb {
        "href"?: string;
    }
    interface BlazeBreadcrumbs {
    }
    interface BlazeCalendar {
        "date"?: string;
        "multiple"?: boolean;
        "onSelected"?: (event: CustomEvent<any>) => void;
        "type"?: string;
    }
    interface BlazeCard {
    }
    interface BlazeCardBody {
    }
    interface BlazeCardFooter {
    }
    interface BlazeCardHeader {
    }
    interface BlazeCounter {
        "autoStart"?: boolean;
        "decimal"?: string;
        "decimals"?: number;
        "delay"?: number;
        "duration"?: number;
        "easing"?: boolean;
        "endValue"?: number;
        "grouping"?: boolean;
        "onCompleted"?: (event: CustomEvent<any>) => void;
        "separator"?: string;
        "startValue"?: number;
    }
    interface BlazeDemo {
        "classes"?: string;
        "code"?: string;
        "demo"?: boolean;
        "language"?: string;
    }
    interface BlazeDivider {
        "type"?: string;
    }
    interface BlazeDrawer {
        "dismissible"?: boolean;
        "onClose"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
        "position"?: string;
    }
    interface BlazeFileUpload {
        "drop"?: boolean;
        "multiple"?: boolean;
        "onCompleted"?: (event: CustomEvent<any>) => void;
        "onUploading"?: (event: CustomEvent<any>) => void;
        "url"?: string;
    }
    interface BlazeImage {
        "alt"?: string;
        "collection"?: string;
        "filter"?: string;
        "height"?: number;
        "likes"?: boolean;
        "photo"?: string;
        "src"?: string;
        "user"?: string;
        "width"?: number;
    }
    interface BlazeMediaBody {
    }
    interface BlazeMediaImage {
        "alt"?: string;
        "src"?: string;
    }
    interface BlazeMediaItem {
    }
    interface BlazeModal {
        "dismissible"?: boolean;
        "full"?: boolean;
        "ghost"?: boolean;
        "onClose"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
    }
    interface BlazePagination {
        "onChanged"?: (event: CustomEvent<any>) => void;
        "page"?: number;
        "pages"?: number;
    }
    interface BlazePanel {
        "height"?: number;
    }
    interface BlazeProgress {
        "onChanged"?: (event: CustomEvent<any>) => void;
        "rounded"?: boolean;
        "size"?: string;
        "timer"?: boolean;
    }
    interface BlazeProgressBar {
        "duration"?: number;
        "max"?: number;
        "min"?: number;
        "onChangebar"?: (event: CustomEvent<any>) => void;
        "type"?: string;
        "value"?: number;
    }
    interface BlazeSticky {
        "top"?: number;
    }
    interface BlazeTab {
        "disabled"?: boolean;
        "header"?: string;
        "open"?: boolean;
        "type"?: string;
    }
    interface BlazeTabs {
        "onChanged"?: (event: CustomEvent<any>) => void;
    }
    interface BlazeTimeline {
        "alternate"?: boolean;
        "loading"?: boolean;
    }
    interface BlazeTimelineItem {
        "last"?: boolean;
        "left"?: boolean;
        "loading"?: boolean;
        "type"?: string;
    }
    interface BlazeToggle {
        "onChanged"?: (event: CustomEvent<any>) => void;
        "toggled"?: boolean;
        "type"?: string;
    }
    interface IntrinsicElements {
        "blaze-accordion": BlazeAccordion;
        "blaze-accordion-pane": BlazeAccordionPane;
        "blaze-address": BlazeAddress;
        "blaze-address-heading": BlazeAddressHeading;
        "blaze-alert": BlazeAlert;
        "blaze-alerts": BlazeAlerts;
        "blaze-autocomplete": BlazeAutocomplete;
        "blaze-avatar": BlazeAvatar;
        "blaze-back-to-top": BlazeBackToTop;
        "blaze-badge": BlazeBadge;
        "blaze-breadcrumb": BlazeBreadcrumb;
        "blaze-breadcrumbs": BlazeBreadcrumbs;
        "blaze-calendar": BlazeCalendar;
        "blaze-card": BlazeCard;
        "blaze-card-body": BlazeCardBody;
        "blaze-card-footer": BlazeCardFooter;
        "blaze-card-header": BlazeCardHeader;
        "blaze-counter": BlazeCounter;
        "blaze-demo": BlazeDemo;
        "blaze-divider": BlazeDivider;
        "blaze-drawer": BlazeDrawer;
        "blaze-file-upload": BlazeFileUpload;
        "blaze-image": BlazeImage;
        "blaze-media-body": BlazeMediaBody;
        "blaze-media-image": BlazeMediaImage;
        "blaze-media-item": BlazeMediaItem;
        "blaze-modal": BlazeModal;
        "blaze-pagination": BlazePagination;
        "blaze-panel": BlazePanel;
        "blaze-progress": BlazeProgress;
        "blaze-progress-bar": BlazeProgressBar;
        "blaze-sticky": BlazeSticky;
        "blaze-tab": BlazeTab;
        "blaze-tabs": BlazeTabs;
        "blaze-timeline": BlazeTimeline;
        "blaze-timeline-item": BlazeTimelineItem;
        "blaze-toggle": BlazeToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "blaze-accordion": LocalJSX.BlazeAccordion & JSXBase.HTMLAttributes<HTMLBlazeAccordionElement>;
            "blaze-accordion-pane": LocalJSX.BlazeAccordionPane & JSXBase.HTMLAttributes<HTMLBlazeAccordionPaneElement>;
            "blaze-address": LocalJSX.BlazeAddress & JSXBase.HTMLAttributes<HTMLBlazeAddressElement>;
            "blaze-address-heading": LocalJSX.BlazeAddressHeading & JSXBase.HTMLAttributes<HTMLBlazeAddressHeadingElement>;
            "blaze-alert": LocalJSX.BlazeAlert & JSXBase.HTMLAttributes<HTMLBlazeAlertElement>;
            "blaze-alerts": LocalJSX.BlazeAlerts & JSXBase.HTMLAttributes<HTMLBlazeAlertsElement>;
            "blaze-autocomplete": LocalJSX.BlazeAutocomplete & JSXBase.HTMLAttributes<HTMLBlazeAutocompleteElement>;
            "blaze-avatar": LocalJSX.BlazeAvatar & JSXBase.HTMLAttributes<HTMLBlazeAvatarElement>;
            "blaze-back-to-top": LocalJSX.BlazeBackToTop & JSXBase.HTMLAttributes<HTMLBlazeBackToTopElement>;
            "blaze-badge": LocalJSX.BlazeBadge & JSXBase.HTMLAttributes<HTMLBlazeBadgeElement>;
            "blaze-breadcrumb": LocalJSX.BlazeBreadcrumb & JSXBase.HTMLAttributes<HTMLBlazeBreadcrumbElement>;
            "blaze-breadcrumbs": LocalJSX.BlazeBreadcrumbs & JSXBase.HTMLAttributes<HTMLBlazeBreadcrumbsElement>;
            "blaze-calendar": LocalJSX.BlazeCalendar & JSXBase.HTMLAttributes<HTMLBlazeCalendarElement>;
            "blaze-card": LocalJSX.BlazeCard & JSXBase.HTMLAttributes<HTMLBlazeCardElement>;
            "blaze-card-body": LocalJSX.BlazeCardBody & JSXBase.HTMLAttributes<HTMLBlazeCardBodyElement>;
            "blaze-card-footer": LocalJSX.BlazeCardFooter & JSXBase.HTMLAttributes<HTMLBlazeCardFooterElement>;
            "blaze-card-header": LocalJSX.BlazeCardHeader & JSXBase.HTMLAttributes<HTMLBlazeCardHeaderElement>;
            "blaze-counter": LocalJSX.BlazeCounter & JSXBase.HTMLAttributes<HTMLBlazeCounterElement>;
            "blaze-demo": LocalJSX.BlazeDemo & JSXBase.HTMLAttributes<HTMLBlazeDemoElement>;
            "blaze-divider": LocalJSX.BlazeDivider & JSXBase.HTMLAttributes<HTMLBlazeDividerElement>;
            "blaze-drawer": LocalJSX.BlazeDrawer & JSXBase.HTMLAttributes<HTMLBlazeDrawerElement>;
            "blaze-file-upload": LocalJSX.BlazeFileUpload & JSXBase.HTMLAttributes<HTMLBlazeFileUploadElement>;
            "blaze-image": LocalJSX.BlazeImage & JSXBase.HTMLAttributes<HTMLBlazeImageElement>;
            "blaze-media-body": LocalJSX.BlazeMediaBody & JSXBase.HTMLAttributes<HTMLBlazeMediaBodyElement>;
            "blaze-media-image": LocalJSX.BlazeMediaImage & JSXBase.HTMLAttributes<HTMLBlazeMediaImageElement>;
            "blaze-media-item": LocalJSX.BlazeMediaItem & JSXBase.HTMLAttributes<HTMLBlazeMediaItemElement>;
            "blaze-modal": LocalJSX.BlazeModal & JSXBase.HTMLAttributes<HTMLBlazeModalElement>;
            "blaze-pagination": LocalJSX.BlazePagination & JSXBase.HTMLAttributes<HTMLBlazePaginationElement>;
            "blaze-panel": LocalJSX.BlazePanel & JSXBase.HTMLAttributes<HTMLBlazePanelElement>;
            "blaze-progress": LocalJSX.BlazeProgress & JSXBase.HTMLAttributes<HTMLBlazeProgressElement>;
            "blaze-progress-bar": LocalJSX.BlazeProgressBar & JSXBase.HTMLAttributes<HTMLBlazeProgressBarElement>;
            "blaze-sticky": LocalJSX.BlazeSticky & JSXBase.HTMLAttributes<HTMLBlazeStickyElement>;
            "blaze-tab": LocalJSX.BlazeTab & JSXBase.HTMLAttributes<HTMLBlazeTabElement>;
            "blaze-tabs": LocalJSX.BlazeTabs & JSXBase.HTMLAttributes<HTMLBlazeTabsElement>;
            "blaze-timeline": LocalJSX.BlazeTimeline & JSXBase.HTMLAttributes<HTMLBlazeTimelineElement>;
            "blaze-timeline-item": LocalJSX.BlazeTimelineItem & JSXBase.HTMLAttributes<HTMLBlazeTimelineItemElement>;
            "blaze-toggle": LocalJSX.BlazeToggle & JSXBase.HTMLAttributes<HTMLBlazeToggleElement>;
        }
    }
}
